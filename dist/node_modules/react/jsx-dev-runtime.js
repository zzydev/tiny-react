(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-dev-runtime"] = global["jsx-dev-runtime"] || {}, global["jsx-dev-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

	const REACT_ELEMENT_TYPE = Symbol.for('react.element');

	const ReactElement = (type, key, ref, props) => {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'zzydev'
	    };
	    if (Object.freeze) {
	        Object.freeze(element.props);
	        Object.freeze(element);
	    }
	    return element;
	};
	const jsx = (type, config, ...children) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    if (config != null) {
	        if (hasValidRef(config)) {
	            ref = config.ref;
	        }
	        // 此处将 key 值转换为字符串
	        if (hasValidKey(config)) {
	            key = '' + config.key;
	        }
	    }
	    for (const prop in config) {
	        if (Object.prototype.hasOwnProperty.call(config, prop) &&
	            !Object.prototype.hasOwnProperty.call(RESERVED_PROPS, prop)) {
	            props[prop] = config[prop];
	        }
	    }
	    const childrenLen = children.length;
	    if (childrenLen) {
	        if (childrenLen === 1) {
	            props.children = children[0];
	        }
	        else {
	            props.children = children;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	const jsxDEV = (type, config) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    if (config != null) {
	        if (hasValidRef(config)) {
	            ref = config.ref;
	        }
	        // 此处将 key 值转换为字符串
	        if (hasValidKey(config)) {
	            key = '' + config.key;
	        }
	    }
	    for (const prop in config) {
	        if (Object.prototype.hasOwnProperty.call(config, prop) &&
	            !Object.prototype.hasOwnProperty.call(RESERVED_PROPS, prop)) {
	            props[prop] = config[prop];
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	function hasValidKey(config) {
	    return config.key !== undefined;
	}
	function hasValidRef(config) {
	    return config.ref !== undefined;
	}
	const RESERVED_PROPS = {
	    key: true,
	    ref: true
	};

	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
